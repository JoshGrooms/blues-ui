@import "ui-variables";

.text(error)
{
     color:         @text-color-error;
    text-shadow:    none;
}
.text(heading)
{
    color:          @text-color-heading;
    font-weight:    bold;
    text-shadow:    none;
}
.text(highlight)
{
    font-weight:    bold;
    color:          @text-color-highlight;
}
.text(info)
{
    color:          @text-color-info;
    text-shadow:    none;
}
.text(normal)
{
    font-weight:    normal;
    color:          @text-color;
    text-shadow:    none;
}
.text(selected)
{
    .text(highlight)
}
.text(success)
{
    color: @text-color-success;
    text-shadow: none;
}
.text(subheading)
{
    color:          @text-color;
}
.text(subtle)
{
    font-weight: normal;
    color: @text-color-subtle;
    text-shadow: none;
}
.text(warning)
{
    color: @text-color-warning;
    text-shadow: none;
}





@shade-darker:          14.29%;
@shade-dark:            9.52%;
@shade-semidark:        4.76%;
@shade-normal:          0%;
@shade-semilight:       4.76%;
@shade-light:           9.52%;
@shade-lighter:         14.29%;

@fade-semiopaque:       87.5%;
@fade-translucent:      75%;
@fade-semitranslucent:  62.5%;
@fade-normal:           50%;
@fade-semifaded:        37.5%;
@fade-faded:            25%;
@fade-semitransparent:  12.5%;


.button()
{
    .gradient(fade(@gloss-color-lighter, 50%), fade(@gloss-color-darker, 50%));
    .beveled(1px, inset, fade(@shadow-color, 12.5%), fade(@gloss-color, 12.5%));
    .text(normal);

    box-shadow: inset 0px 0px 2px fade(@shadow-color, 37.5%);

    &:focus     { color: @dark-blue; }
    &:hover
    {
        .beveled(1px, inset, fade(@shadow-color, 12.5%), fade(@gloss-color, 12.5%));
        .gradient(fade(@gloss-color-lighter, 75%), fade(@gloss-color-darker, 50%));
        background-clip: padding-box;
    }
    &.selected
    {
        .gradient(fade(@gloss-color-darker, 50%), fade(@gloss-color-lighter, 50%));
        .text(highlight);

        box-shadow: inset 1px 2px 3px fade(@shadow-color-light, 50%);

        &:hover
        {
            .gradient(fade(@gloss-color-darker, 75%), fade(@gloss-color-lighter, 75%));
        }
    }
}

.deep-inset()
{
    .beveled(1px, inset, fade(@shadow-color, 12.5%), fade(@gloss-color-dark, 12.5%));
    background-color:   fade(@shadow-color, 25%);
    box-shadow:         inset 10px 10px 10px -10px fade(@shadow-color, 50%);
}

.flat()
{
    background-color:   transparent;
    background-image:   none;
    border:             none;
    box-shadow:         none;
}

.flat-list()
{
    .base-list-item();
    ol
    {
        .flat();
        border-radius: 0em;
    }
}

.base-list-item()
{
    li
    {
        .flat();
        .text(subtle);
        &.selected
        {
            .text(highlight);
            background-image:       @vibrant-blue-gradient;
            &:before                { display: none; }
            &.list-nested-item
            {
                background-image:   none;
                li                  { .text(subtle); }
            }
        }
    }

    ._list-class-color(error);
    ._list-class-color(info);
    ._list-class-color(subtle);
    ._list-class-color(success);
    ._list-class-color(warning);
}

.tree-list()
{
    .flat-list();
    li.selected:before
    {
        display: inherit;
        background-image: @vibrant-blue-gradient;
    }
}

.inset-list-item()
{
    .base-list-item();
    li
    {
        padding: 1em;
    }
}

.inset-list()
{
    .inset-list-item();
    ol
    {
        .deep-inset();
        border-radius: 0.25em;
    }

}

.shallow-outset()
{
    .beveled(1px, inset, fade(@gloss-color-dark, 12.5%), fade(@shadow-color, 12.5%));
    .text(normal);
    background-color:       @overlay-background-color;
    box-shadow:             3px 3px 5px fade(@shadow-color, 25%),
                            -1px -1px 1px fade(@shadow-color-lighter, 87.5%);
}


._list-class-color(@class)
{
    li:not(.list-nested-item).text-@{class},
    li.list-nested-item.text-@{class} > .list-item
    {
        .text(@class);
    }
}



._beveled(inset)    { background-clip: padding-box; }
._beveled(outset)   { background-clip: border-box; }

.beveled(@size; @direction: outset; @topLeft; @bottomRight)
{
    ._beveled(@direction);

    border: @size solid @topLeft;
    border-bottom-color: @bottomRight;
    border-right-color: @bottomRight;
}




.gradient(@topColor; @bottomColor; @direction: horizontal)
{
    background-image: -webkit-linear-gradient(@topColor, @bottomColor)
}
